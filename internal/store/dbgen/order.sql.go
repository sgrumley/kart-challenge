// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order.sql

package dbgen

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addProductToOrder = `-- name: AddProductToOrder :one
INSERT INTO order_product (
    id,
    order_id,
    product_id
) VALUES (
    $1,
    $2,
    $3
) RETURNING id, order_id, product_id
`

type AddProductToOrderParams struct {
	ID        uuid.UUID
	OrderID   uuid.UUID
	ProductID uuid.UUID
}

func (q *Queries) AddProductToOrder(ctx context.Context, arg AddProductToOrderParams) (OrderProduct, error) {
	row := q.db.QueryRowContext(ctx, addProductToOrder, arg.ID, arg.OrderID, arg.ProductID)
	var i OrderProduct
	err := row.Scan(&i.ID, &i.OrderID, &i.ProductID)
	return i, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    id,
    coupon_code,
    created_at
) VALUES (
    $1,
    $2,
    $3
) RETURNING id, coupon_code, created_at
`

type CreateOrderParams struct {
	ID         uuid.UUID
	CouponCode sql.NullString
	CreatedAt  int64
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.ID, arg.CouponCode, arg.CreatedAt)
	var i Order
	err := row.Scan(&i.ID, &i.CouponCode, &i.CreatedAt)
	return i, err
}

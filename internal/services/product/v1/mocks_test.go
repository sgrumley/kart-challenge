// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package v1

import (
	"context"
	"github.com/sgrumley/kart-challenge/pkg/models"
	"sync"
)

// Ensure, that ProductStorableMock does implement ProductStorable.
// If this is not the case, regenerate this file with moq.
var _ ProductStorable = &ProductStorableMock{}

// ProductStorableMock is a mock implementation of ProductStorable.
//
//	func TestSomethingThatUsesProductStorable(t *testing.T) {
//
//		// make and configure a mocked ProductStorable
//		mockedProductStorable := &ProductStorableMock{
//			GetProductFunc: func(ctx context.Context, id string) (models.Product, error) {
//				panic("mock out the GetProduct method")
//			},
//			ListProductsFunc: func(ctx context.Context) ([]models.Product, error) {
//				panic("mock out the ListProducts method")
//			},
//		}
//
//		// use mockedProductStorable in code that requires ProductStorable
//		// and then make assertions.
//
//	}
type ProductStorableMock struct {
	// GetProductFunc mocks the GetProduct method.
	GetProductFunc func(ctx context.Context, id string) (models.Product, error)

	// ListProductsFunc mocks the ListProducts method.
	ListProductsFunc func(ctx context.Context) ([]models.Product, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetProduct holds details about calls to the GetProduct method.
		GetProduct []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ListProducts holds details about calls to the ListProducts method.
		ListProducts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetProduct   sync.RWMutex
	lockListProducts sync.RWMutex
}

// GetProduct calls GetProductFunc.
func (mock *ProductStorableMock) GetProduct(ctx context.Context, id string) (models.Product, error) {
	if mock.GetProductFunc == nil {
		panic("ProductStorableMock.GetProductFunc: method is nil but ProductStorable.GetProduct was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetProduct.Lock()
	mock.calls.GetProduct = append(mock.calls.GetProduct, callInfo)
	mock.lockGetProduct.Unlock()
	return mock.GetProductFunc(ctx, id)
}

// GetProductCalls gets all the calls that were made to GetProduct.
// Check the length with:
//
//	len(mockedProductStorable.GetProductCalls())
func (mock *ProductStorableMock) GetProductCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetProduct.RLock()
	calls = mock.calls.GetProduct
	mock.lockGetProduct.RUnlock()
	return calls
}

// ListProducts calls ListProductsFunc.
func (mock *ProductStorableMock) ListProducts(ctx context.Context) ([]models.Product, error) {
	if mock.ListProductsFunc == nil {
		panic("ProductStorableMock.ListProductsFunc: method is nil but ProductStorable.ListProducts was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListProducts.Lock()
	mock.calls.ListProducts = append(mock.calls.ListProducts, callInfo)
	mock.lockListProducts.Unlock()
	return mock.ListProductsFunc(ctx)
}

// ListProductsCalls gets all the calls that were made to ListProducts.
// Check the length with:
//
//	len(mockedProductStorable.ListProductsCalls())
func (mock *ProductStorableMock) ListProductsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListProducts.RLock()
	calls = mock.calls.ListProducts
	mock.lockListProducts.RUnlock()
	return calls
}

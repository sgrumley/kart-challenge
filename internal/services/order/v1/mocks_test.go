// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package v1

import (
	"context"
	"github.com/sgrumley/kart-challenge/pkg/models"
	"sync"
)

// Ensure, that OrderStorableMock does implement OrderStorable.
// If this is not the case, regenerate this file with moq.
var _ OrderStorable = &OrderStorableMock{}

// OrderStorableMock is a mock implementation of OrderStorable.
//
//	func TestSomethingThatUsesOrderStorable(t *testing.T) {
//
//		// make and configure a mocked OrderStorable
//		mockedOrderStorable := &OrderStorableMock{
//			CheckCouponFunc: func(ctx context.Context, coupon string) bool {
//				panic("mock out the CheckCoupon method")
//			},
//			CreateOrderFunc: func(ctx context.Context, order models.Order) (models.Order, error) {
//				panic("mock out the CreateOrder method")
//			},
//		}
//
//		// use mockedOrderStorable in code that requires OrderStorable
//		// and then make assertions.
//
//	}
type OrderStorableMock struct {
	// CheckCouponFunc mocks the CheckCoupon method.
	CheckCouponFunc func(ctx context.Context, coupon string) bool

	// CreateOrderFunc mocks the CreateOrder method.
	CreateOrderFunc func(ctx context.Context, order models.Order) (models.Order, error)

	// calls tracks calls to the methods.
	calls struct {
		// CheckCoupon holds details about calls to the CheckCoupon method.
		CheckCoupon []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Coupon is the coupon argument value.
			Coupon string
		}
		// CreateOrder holds details about calls to the CreateOrder method.
		CreateOrder []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Order is the order argument value.
			Order models.Order
		}
	}
	lockCheckCoupon sync.RWMutex
	lockCreateOrder sync.RWMutex
}

// CheckCoupon calls CheckCouponFunc.
func (mock *OrderStorableMock) CheckCoupon(ctx context.Context, coupon string) bool {
	if mock.CheckCouponFunc == nil {
		panic("OrderStorableMock.CheckCouponFunc: method is nil but OrderStorable.CheckCoupon was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Coupon string
	}{
		Ctx:    ctx,
		Coupon: coupon,
	}
	mock.lockCheckCoupon.Lock()
	mock.calls.CheckCoupon = append(mock.calls.CheckCoupon, callInfo)
	mock.lockCheckCoupon.Unlock()
	return mock.CheckCouponFunc(ctx, coupon)
}

// CheckCouponCalls gets all the calls that were made to CheckCoupon.
// Check the length with:
//
//	len(mockedOrderStorable.CheckCouponCalls())
func (mock *OrderStorableMock) CheckCouponCalls() []struct {
	Ctx    context.Context
	Coupon string
} {
	var calls []struct {
		Ctx    context.Context
		Coupon string
	}
	mock.lockCheckCoupon.RLock()
	calls = mock.calls.CheckCoupon
	mock.lockCheckCoupon.RUnlock()
	return calls
}

// CreateOrder calls CreateOrderFunc.
func (mock *OrderStorableMock) CreateOrder(ctx context.Context, order models.Order) (models.Order, error) {
	if mock.CreateOrderFunc == nil {
		panic("OrderStorableMock.CreateOrderFunc: method is nil but OrderStorable.CreateOrder was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Order models.Order
	}{
		Ctx:   ctx,
		Order: order,
	}
	mock.lockCreateOrder.Lock()
	mock.calls.CreateOrder = append(mock.calls.CreateOrder, callInfo)
	mock.lockCreateOrder.Unlock()
	return mock.CreateOrderFunc(ctx, order)
}

// CreateOrderCalls gets all the calls that were made to CreateOrder.
// Check the length with:
//
//	len(mockedOrderStorable.CreateOrderCalls())
func (mock *OrderStorableMock) CreateOrderCalls() []struct {
	Ctx   context.Context
	Order models.Order
} {
	var calls []struct {
		Ctx   context.Context
		Order models.Order
	}
	mock.lockCreateOrder.RLock()
	calls = mock.calls.CreateOrder
	mock.lockCreateOrder.RUnlock()
	return calls
}

// Ensure, that IdempotencyStoreMock does implement IdempotencyStore.
// If this is not the case, regenerate this file with moq.
var _ IdempotencyStore = &IdempotencyStoreMock{}

// IdempotencyStoreMock is a mock implementation of IdempotencyStore.
//
//	func TestSomethingThatUsesIdempotencyStore(t *testing.T) {
//
//		// make and configure a mocked IdempotencyStore
//		mockedIdempotencyStore := &IdempotencyStoreMock{
//			ExistsFunc: func(key string) bool {
//				panic("mock out the Exists method")
//			},
//			RemoveFunc: func(key string)  {
//				panic("mock out the Remove method")
//			},
//			SetFunc: func(key string)  {
//				panic("mock out the Set method")
//			},
//		}
//
//		// use mockedIdempotencyStore in code that requires IdempotencyStore
//		// and then make assertions.
//
//	}
type IdempotencyStoreMock struct {
	// ExistsFunc mocks the Exists method.
	ExistsFunc func(key string) bool

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(key string)

	// SetFunc mocks the Set method.
	SetFunc func(key string)

	// calls tracks calls to the methods.
	calls struct {
		// Exists holds details about calls to the Exists method.
		Exists []struct {
			// Key is the key argument value.
			Key string
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Key is the key argument value.
			Key string
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// Key is the key argument value.
			Key string
		}
	}
	lockExists sync.RWMutex
	lockRemove sync.RWMutex
	lockSet    sync.RWMutex
}

// Exists calls ExistsFunc.
func (mock *IdempotencyStoreMock) Exists(key string) bool {
	if mock.ExistsFunc == nil {
		panic("IdempotencyStoreMock.ExistsFunc: method is nil but IdempotencyStore.Exists was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockExists.Lock()
	mock.calls.Exists = append(mock.calls.Exists, callInfo)
	mock.lockExists.Unlock()
	return mock.ExistsFunc(key)
}

// ExistsCalls gets all the calls that were made to Exists.
// Check the length with:
//
//	len(mockedIdempotencyStore.ExistsCalls())
func (mock *IdempotencyStoreMock) ExistsCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockExists.RLock()
	calls = mock.calls.Exists
	mock.lockExists.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *IdempotencyStoreMock) Remove(key string) {
	if mock.RemoveFunc == nil {
		panic("IdempotencyStoreMock.RemoveFunc: method is nil but IdempotencyStore.Remove was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	mock.RemoveFunc(key)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//
//	len(mockedIdempotencyStore.RemoveCalls())
func (mock *IdempotencyStoreMock) RemoveCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *IdempotencyStoreMock) Set(key string) {
	if mock.SetFunc == nil {
		panic("IdempotencyStoreMock.SetFunc: method is nil but IdempotencyStore.Set was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	mock.SetFunc(key)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//
//	len(mockedIdempotencyStore.SetCalls())
func (mock *IdempotencyStoreMock) SetCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}
